

(* :Title: FCFeynmanRegularizeDivergence.test										*)

(*
	This software is covered by the GNU General Public License 3.
	Copyright (C) 1990-2022 Rolf Mertig
	Copyright (C) 1997-2022 Frederik Orellana
	Copyright (C) 2014-2022 Vladyslav Shtabovenko
*)

(* :Summary:  Framework independent unit tests for FCFeynmanRegularizeDivergence	*)

(* ------------------------------------------------------------------------ *)

Tests`LoopIntegrals`fcstFCFeynmanRegularizeDivergence =
({
{"fcstFCFeynmanRegularizeDivergence-ID1",
"FCFeynmanRegularizeDivergence[(x[3]*x[4]+x[3]*x[5]+x[4]*x[5])^(-1+\
3*ep)*(x[2]^2*x[3]+x[1]^2*x[4]+4*x[3]*x[4]^2+x[1]^2*x[5]-2*x[1]*x[2]*\
x[5]+x[2]^2*x[5]+4*x[3]*x[4]*x[5]+4*x[4]^2*x[5])^(-1-2*ep),{{{},{x[1],\
x[2]}},4*ep}]",
"(2*(1 + 2*ep)*x[4]*(x[3]*x[4] + x[3]*x[5] + \
x[4]*x[5])^(3*ep))/(ep*(x[2]^2*x[3] + x[1]^2*x[4] + 4*x[3]*x[4]^2 + \
x[1]^2*x[5] - 2*x[1]*x[2]*x[5] + x[2]^2*x[5] + 4*x[3]*x[4]*x[5] + \
4*x[4]^2*x[5])^(2*(1 + ep)))"},
{"fcstFCFeynmanRegularizeDivergence-ID2",
"FCFeynmanRegularizeDivergence[(x[3]*x[4])^(-2+3*Epsilon)/(SPD[n,n]\
*x[2]^2*x[3]+SPD[n,n]*x[1]^2*x[4]+2*SPD[n,n]*x[1]*x[2]*x[4]+SPD[n,n]*\
x[2]^2*x[4]+m^2*x[3]^2*x[4]+m^2*x[3]*x[4]^2)^(2*Epsilon),{{{},{x[1],x[\
3]}},Epsilon}]",
"(2*(x[3]*x[4])^(3*Epsilon)*(SPD[n, n]*x[2]^2*x[3] + 2*SPD[n, \
n]*x[1]*x[2]*x[4] + 2*SPD[n, n]*x[2]^2*x[4] + \
m^2*x[3]*x[4]^2)*(SPD[n, n]*x[2]^2*x[3] + SPD[n, n]*x[1]^2*x[4] + \
2*SPD[n, n]*x[1]*x[2]*x[4] + SPD[n, n]*x[2]^2*x[4] + m^2*x[3]^2*x[4] \
+ m^2*x[3]*x[4]^2)^(-1 - 2*Epsilon))/(x[3]^2*x[4]^2)"},
{"fcstFCFeynmanRegularizeDivergence-ID3",
"FCFeynmanRegularizeDivergence[((x[1]+x[2]+x[3]+x[4]+x[5])^4*((x[3]\
*(x[2]+x[4])*x[5]+x[1]*(x[4]*x[5]+x[2]*(x[3]+x[5])+x[3]*(x[4]+x[5])))/\
(x[1]+x[2]+x[3]+x[4]+x[5])^3)^(4*ep)*((-(x[2]*x[3]*x[4]*x[5])-x[1]*x[\
2]*(x[3]*(x[4]-x[5])+x[4]*x[5])+x[1]^2*(x[4]*x[5]+x[2]*(x[3]+x[5])+x[\
3]*(x[4]+x[5])))/(x[1]+x[2]+x[3]+x[4]+x[5])^4)^(1-3*ep))/(x[3]*(x[2]+\
x[4])*x[5]+x[1]*(x[4]*x[5]+x[2]*(x[3]+x[5])+x[3]*(x[4]+x[5])))^3,{{{},\
{x[1]}},2ep}]",
"-1/2*((x[1]*x[2]*x[3] + x[1]*x[3]*x[4] + x[1]*x[2]*x[5] + \
x[1]*x[3]*x[5] + x[2]*x[3]*x[5] + x[1]*x[4]*x[5] + \
x[3]*x[4]*x[5])^(-4 + 4*ep)*(-(x[1]^2*x[2]^2*x[3]^2*x[4]) + \
3*ep*x[1]^2*x[2]^2*x[3]^2*x[4] - x[1]^2*x[2]*x[3]^2*x[4]^2 + \
3*ep*x[1]^2*x[2]*x[3]^2*x[4]^2 - 2*x[1]^2*x[2]^2*x[3]^2*x[5] + \
ep*x[1]^2*x[2]^2*x[3]^2*x[5] - 2*x[1]^2*x[2]^2*x[3]*x[4]*x[5] + \
6*ep*x[1]^2*x[2]^2*x[3]*x[4]*x[5] - 6*x[1]^2*x[2]*x[3]^2*x[4]*x[5] + \
8*ep*x[1]^2*x[2]*x[3]^2*x[4]*x[5] + 5*ep*x[1]*x[2]^2*x[3]^2*x[4]*x[5] \
- 2*x[1]^2*x[2]*x[3]*x[4]^2*x[5] + 6*ep*x[1]^2*x[2]*x[3]*x[4]^2*x[5] \
- 3*x[1]^2*x[3]^2*x[4]^2*x[5] + 4*ep*x[1]^2*x[3]^2*x[4]^2*x[5] + \
5*ep*x[1]*x[2]*x[3]^2*x[4]^2*x[5] - 2*x[1]^2*x[2]^2*x[3]*x[5]^2 + \
ep*x[1]^2*x[2]^2*x[3]*x[5]^2 - 2*x[1]^2*x[2]*x[3]^2*x[5]^2 + \
ep*x[1]^2*x[2]*x[3]^2*x[5]^2 - 2*x[1]*x[2]^2*x[3]^2*x[5]^2 + \
ep*x[1]*x[2]^2*x[3]^2*x[5]^2 - x[1]^2*x[2]^2*x[4]*x[5]^2 + \
3*ep*x[1]^2*x[2]^2*x[4]*x[5]^2 - 6*x[1]^2*x[2]*x[3]*x[4]*x[5]^2 + \
8*ep*x[1]^2*x[2]*x[3]*x[4]*x[5]^2 + 5*ep*x[1]*x[2]^2*x[3]*x[4]*x[5]^2 \
- 3*x[1]^2*x[3]^2*x[4]*x[5]^2 + 4*ep*x[1]^2*x[3]^2*x[4]*x[5]^2 - \
4*x[1]*x[2]*x[3]^2*x[4]*x[5]^2 + 7*ep*x[1]*x[2]*x[3]^2*x[4]*x[5]^2 + \
x[2]^2*x[3]^2*x[4]*x[5]^2 + 2*ep*x[2]^2*x[3]^2*x[4]*x[5]^2 - \
x[1]^2*x[2]*x[4]^2*x[5]^2 + 3*ep*x[1]^2*x[2]*x[4]^2*x[5]^2 - \
3*x[1]^2*x[3]*x[4]^2*x[5]^2 + 4*ep*x[1]^2*x[3]*x[4]^2*x[5]^2 + \
5*ep*x[1]*x[2]*x[3]*x[4]^2*x[5]^2 + x[2]*x[3]^2*x[4]^2*x[5]^2 + \
2*ep*x[2]*x[3]^2*x[4]^2*x[5]^2))/(ep*(x[1]^2*x[2]*x[3] + \
x[1]^2*x[3]*x[4] - x[1]*x[2]*x[3]*x[4] + x[1]^2*x[2]*x[5] + \
x[1]^2*x[3]*x[5] + x[1]*x[2]*x[3]*x[5] + x[1]^2*x[4]*x[5] - \
x[1]*x[2]*x[4]*x[5] - x[2]*x[3]*x[4]*x[5])^(3*ep))"},
{"fcstFCFeynmanRegularizeDivergence-ID4",
"FCFeynmanRegularizeDivergence[(y[
	1]*(y[1] + y[2] + y[3])^(2*ep)*(y[1]^2 - 4*y[2]*y[3])^(-2 -
	ep))/(x[1] + x[2])^2, {{{{y[2]}, {y[3]}}, -2*
	ep}, {{{y[3]}, {y[2]}}, -2*ep}}]",
"(y[1]*(y[1] + y[2] + y[3])^(2*(-1 + ep))*(y[1]^2 -
4*y[2]*y[3])^(-2 - ep)*(2*ep*y[1]^2 - y[1]*y[2] + 4*ep*y[1]*y[2] -
y[1]*y[3] + 4*ep*y[1]*y[3] - 4*y[2]*y[3] +
8*ep*y[2]*y[3]))/(2*ep*(x[1] + x[2])^2)"}
});
