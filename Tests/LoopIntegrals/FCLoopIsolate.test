

(* :Title: FCLoopIsolate.test                                              	    *)

(*
	This software is covered by the GNU General Public License 3.
	Copyright (C) 1990-2023 Rolf Mertig
	Copyright (C) 1997-2023 Frederik Orellana
	Copyright (C) 2014-2023 Vladyslav Shtabovenko
*)

(* :Summary:  Framework independent unit tests for FCLoopIsolate	  		*)

(* ------------------------------------------------------------------------ *)

Tests`LoopIntegrals`fcstFCLoopIsolate = {

{"fcstFCLoopIsolate-ID1","FCLoopIsolate[x, {q}]","x"},
{"fcstFCLoopIsolate-ID2","FCLoopIsolate[x+y, {q}]","x+y"},
{"fcstFCLoopIsolate-ID3","FCLoopIsolate[q , {q}]",
	"FCGV[\"LoopInt\"][q]"},
{"fcstFCLoopIsolate-ID4","FCLoopIsolate[x q , {q}]",
	"x*FCGV[\"LoopInt\"][q]"},
{"fcstFCLoopIsolate-ID5","FCLoopIsolate[q x + y, {q}]",
	"y + x*FCGV[\"LoopInt\"][q]"},
{"fcstFCLoopIsolate-ID6","FCLoopIsolate[q x + z (q + y), {q}]",
	"y*z + (x + z)*FCGV[\"LoopInt\"][q]"},
{"fcstFCLoopIsolate-ID7","FCLoopIsolate[q x + z (q + y) + GS[q], {q}]",
	"y*z + (x + z)*FCGV[\"LoopInt\"][q] + FCGV[\"LoopInt\"][DiracGamma[Momentum[q]]]"},
{"fcstFCLoopIsolate-ID8","FCLoopIsolate[q x + z (q + y) + d GS[q], {q}, ExceptHeads -> {GS}]",
	"y*z + (x + z)*FCGV[\"LoopInt\"][q] + d*FCGV[\"LoopInt\"][DiracGamma[Momentum[q]]]"},
{"fcstFCLoopIsolate-ID9","FCLoopIsolate[FCLoopIsolate[q x + z (q + y) + d GS[q], {q},
ExceptHeads -> {GS}], {q}, Head -> ll]",
	"y*z + (x + z)*ll[q] + d*ll[DiracGamma[Momentum[q]]]"},
{"fcstFCLoopIsolate-ID10","MatchQ[FCLoopIsolate[q (x + y), {q}, Head -> ll, Isolate -> True],
HoldForm[KK[_]] ll[q]]","True"},
{"fcstFCLoopIsolate-ID11","FCLoopIsolate[
	GA[j].(GSD[i].FVD[q, i] + GSD[p]).GA[5] FAD[{q, m}], {q}] // FCE","GA[j].GSD[p].GA[5] FCGV[\"LoopInt\"][FAD[{q, m}]] +
	GA[j].GSD[i].GA[5] FCGV[\"LoopInt\"][FAD[{q, m}] FVD[q, i]]"},
{"fcstFCLoopIsolate-ID12","FCLoopIsolate[ SUNT[i].(x + y).SUNT[j] +
	(GS[x] + GA[j].(GSD[i] FVD[q, i] + GSD[p]).GA[5]).SUNT[a] FAD[{q, m}], {q}] // FCE",
	"SUNT[i] . (x + y) . SUNT[j] + (GA[j] . GSD[p] . GA[5] + GS[x])*SUNT[a]*
FCGV[\"LoopInt\"][FAD[{q, m}]] + GA[j] . GSD[i] . GA[5]*SUNT[a]*
FCGV[\"LoopInt\"][FAD[{q, m}]*FVD[q, i]]"},
{"fcstFCLoopIsolate-ID12","FCLoopIsolate[(GS[x] +
	GA[j].(GSD[i] FVD[q, i] + GSD[p] + GSD[q + x]).GA[5]).SUNT[
	a] FAD[{q, m}], {q}] // FCE","(GA[j] . GSD[p] . GA[5] + GA[j] . GSD[x] . GA[5] + GS[x])*SUNT[a]*
FCGV[\"LoopInt\"][FAD[{q, m}]] +
SUNT[a]*FCGV[\"LoopInt\"][GA[j] . GSD[q] . GA[5]*FAD[{q, m}]] +
GA[j] . GSD[i] . GA[5]*SUNT[a]*FCGV[\"LoopInt\"][FAD[{q, m}]*FVD[q, i]]"},
{"fcstFCLoopIsolate-ID13","FCLoopIsolate[GSD[p + q] FAD[{q, m}], {q}] // FCE",
	"GSD[p] FCGV[\"LoopInt\"][FAD[{q, m}]] + FCGV[\"LoopInt\"][FAD[{q, m}] GSD[q]]"},
{"fcstFCLoopIsolate-ID14","FCLoopIsolate[
	a FAD[{q1, m}, {q3, m}] + b FAD[{q1, m1}, {q1 - q2, m2}] +
	c FAD[{q1, m}] + d FAD[{q2, m}], {q1, q2}, MultiLoop -> True,
	Head -> TT]//FCE","c*FAD[{q1, m}] + d*FAD[{q2, m}] + a*FAD[{q1, m}]*FAD[{q3, m}] + b*TT[FAD[{q1, m1}, {q1 - q2, m2}]]"},
{"fcstFCLoopIsolate-ID15","FCLoopIsolate[
	FCLoopIsolate[a FAD[{q1, m}, {q3, m}] +
	b FAD[{q1, m1}, {q1 - q2, m2}] + c FAD[{q1, m}] +
	d FAD[{q2, m}], {q1, q2}, MultiLoop -> True, Head -> TT], {q1, q3},
	MultiLoop -> True, Head -> TT2]//FCE","c*FAD[{q1, m}] + d*FAD[{q2, m}] + b*TT[FAD[{q1, m1}, {q1 - q2, m2}]] + a*TT2[FAD[{q1, m}]*FAD[{q3, m}]]"},
{"fcstFCLoopIsolate-ID16","FCLoopIsolate[x*A0[m^2], {q}, PaVe -> False]","x*A0[m^2]"},
{"fcstFCLoopIsolate-ID17","FCLoopIsolate[x*A0[m^2], {q}]","x FCGV[\"LoopInt\"][A0[m^2]]"},
{"fcstFCLoopIsolate-ID17","FCLoopIsolate[SPD[q + k, p + l] FAD[{q, m}], {q}] // FCE","FCGV[\"LoopInt\"][FAD[{q, m}] SPD[l + p, k + q]]"},
{"fcstFCLoopIsolate-ID18","FCLoopIsolate[SPD[q + k, p + l] FAD[{q, m}], {q},ExpandScalarProduct -> True] // FCE",
"SPD[k, l + p]*FCGV[\"LoopInt\"][FAD[{q, m}]] + FCGV[\"LoopInt\"][FAD[{q, m}]*SPD[l + p, q]]"},
{"fcstFCLoopIsolate-ID19","FCLoopIsolate[a FCI[FAD[{q, 0, 2}]] + b FCI[FAD[{q, 0, 1}]], {q},
Head -> loop, FCLoopIBPReducableQ -> True] // FCE","b FAD[q] + a loop[FAD[q, q]]"},
{"fcstFCLoopIsolate-ID20","FCLoopIsolate[Foobar[x], {}, PaVeIntegralHeads -> Join[OptionValue[FCLoopIsolate, PaVeIntegralHeads],
{Foobar}],Head -> loop]","loop[Foobar[x]]"},
{"fcstFCLoopIsolate-ID21","FCLoopIsolate[CSP[q, p] x + z (q + y) + CGS[q], {q}, Head -> loop]","y z + z loop[q] + x loop[CartesianPair[CartesianMomentum[p], CartesianMomentum[q]]] +
loop[DiracGamma[CartesianMomentum[q]]]"},
{"fcstFCLoopIsolate-ID22","FCLoopIsolate[0, {}, PaVe -> False, ExpandScalarProduct -> True]","0"},
{"fcstFCLoopIsolate-ID23","FCLoopIsolate[xx FAD[l, l + p2, l + p2 - p3 - p4] FVD[l,
nu] (FVD[p1, Lor4] + FVD[-l - p2 + p3 + p4, Lor4]) MTD[Lor3,mu] , {l}, Full -> False, ExpandScalarProduct -> True,
Head -> loopInt] // FCE",
"xx (FVD[p1, Lor4] - FVD[p2 - p3 - p4, Lor4]) loopInt[
FAD[l, l + p2, l + p2 - p3 - p4] FVD[l, nu]] MTD[Lor3, mu] -
xx loopInt[FAD[l, l + p2, l + p2 - p3 - p4] FVD[l, Lor4] FVD[l, nu]] MTD[Lor3, mu]"},
{"fcstFCLoopIsolate-ID24","FCLoopIsolate[xx FAD[l, l + p2, l + p2 - p3 - p4] FVD[l,
nu] (FVD[p1, Lor4] + FVD[-l - p2 + p3 + p4, Lor4]) MTD[Lor3,mu] , {l}, ExpandScalarProduct -> True, Head -> loopInt] //
FCE",
"xx*(FVD[p1, Lor4] - FVD[p2 - p3 - p4, Lor4])*loopInt[FAD[l, l + p2, l + p2 - p3 -
p4]*FVD[l, nu]]*MTD[Lor3, mu] - xx*loopInt[FAD[l, l + p2, l + p2 - p3 -
p4]*FVD[l, Lor4]*FVD[l, nu]]*MTD[Lor3, mu]"},
{"fcstFCLoopIsolate-ID25",
"FCLoopIsolate[GFAD[{SPD[q1,p]SPD[q2,p],n}],{q1,q2},\
Head->loopInt]//FCE",
"loopInt[GFAD[{{SPD[p, q1]*SPD[p, q2], 1}, n}]]"},
{"fcstFCLoopIsolate-ID26",
"FCLoopIsolate[GFAD[{SPD[q1,p]SPD[q2,p],2}],{q1,q2},\
Head->loopInt]//FCE",
"loopInt[GFAD[{{SPD[p, q1]*SPD[p, q2], 1}, 2}]]"},
{"fcstFCLoopIsolate-ID27",
"FCLoopIsolate[FAD[{q2,m}]GFAD[{SPD[q1,p]SPD[q2,p],2}],{q1,q2},\
Head->loopInt]//FCE",
"loopInt[FAD[{q2, m}]*GFAD[{{SPD[p, q1]*SPD[p, q2], 1}, 2}]]"},
{"fcstFCLoopIsolate-ID28",
"FCLoopIsolate[
FAD[{q2, m}] GFAD[{SPD[q1, p] SPD[q2, p], 2}], {q1, q2},
Head -> loopInt, GFAD -> False] // FCE",
"FAD[{q2, m}]*GFAD[{{SPD[p, q1]*SPD[p, q2], 1}, 2}]"},
{"fcstFCLoopIsolate-ID29",
"FCLoopIsolate[SUNT[i].(x+y).SUNT[j]+(CGS[x]+CGA[j].(CGSD[i] \
CVD[q,i]+CGSD[p]).GA[5]).SUNT[a]CFAD[{q,m}],{q},FCE\[Rule]True]",
"SUNT[i] . (x + y) . SUNT[j] + (CGS[x] + CGA[j] . CGSD[p] . \
GA[5])*SUNT[a]*FCGV[\"LoopInt\"][CFAD[{{q, 0}, {m, -1}, 1}]] + CGA[j] \
. CGSD[i] . GA[5]*SUNT[a]*FCGV[\"LoopInt\"][CFAD[{{q, 0}, {m, -1}, \
1}]*CVD[q, i]]"},
{"fcstFCLoopIsolate-ID30",
"FCLoopIsolate[CGSD[p+q] CFAD[{q,m}],{q},FCE\[Rule]True]",
"CGSD[p]*FCGV[\"LoopInt\"][CFAD[{{q, 0}, {m, -1}, 1}]] + \
FCGV[\"LoopInt\"][CFAD[{{q, 0}, {m, -1}, 1}]*CGSD[q]]"},
{"fcstFCLoopIsolate-ID31",
"FCLoopIsolate[a CFAD[{q1,m},{q3,m}]+b CFAD[{q1,m1},{q1-q2,m2}]+c \
CFAD[{q1,m}]+d \
CFAD[{q2,m}],{q1,q2},MultiLoop\[Rule]True,Head\[Rule]TT,FCE\[Rule]\
True]", "c*CFAD[{{q1, 0}, {m, -1}, 1}] + d*CFAD[{{q2, 0}, {m, -1}, \
1}] + a*CFAD[{{q1, 0}, {m, -1}, 1}]*CFAD[{{q3, 0}, {m, -1}, 1}] + \
b*TT[CFAD[{{q1, 0}, {m1, -1}, 1}, {{q1 - q2, 0}, {m2, -1}, 1}]]"},
{"fcstFCLoopIsolate-ID32",
"FCLoopIsolate[FCLoopIsolate[a CFAD[{q1,m},{q3,m}]+b \
CFAD[{q1,m1},{q1-q2,m2}]+c CFAD[{q1,m}]+d \
CFAD[{q2,m}],{q1,q2},MultiLoop\[Rule]True,Head\[Rule]TT],{q1,q3},\
MultiLoop\[Rule]True,Head\[Rule]TT2,FCE\[Rule]True]",
"c*CFAD[{{q1, 0}, {m, -1}, 1}] + d*CFAD[{{q2, 0}, {m, -1}, 1}] + \
b*TT[CFAD[{{q1, 0}, {m1, -1}, 1}, {{q1 - q2, 0}, {m2, -1}, 1}]] + \
a*TT2[CFAD[{{q1, 0}, {m, -1}, 1}]*CFAD[{{q3, 0}, {m, -1}, 1}]]"},
{"fcstFCLoopIsolate-ID33",
"FCLoopIsolate[CSPD[q+k,p+l] CFAD[{q,m}],{q},FCE\[Rule]True]",
"FCGV[\"LoopInt\"][CFAD[{{q, 0}, {m, -1}, 1}]*CSPD[l + p, k + q]]"},
{"fcstFCLoopIsolate-ID34",
"FCLoopIsolate[CSPD[q+k,p+l] CFAD[{q,m}],{q},ExpandScalarProduct\
\[Rule]True,FCE\[Rule]True]",
"CSPD[k, l + p]*FCGV[\"LoopInt\"][CFAD[{{q, 0}, {m, -1}, 1}]] +
FCGV[\"LoopInt\"][CFAD[{{q, 0}, {m, -1}, 1}]*CSPD[l + p, q]]"},
{"fcstFCLoopIsolate-ID35",
"FCLoopIsolate[a FCI[CFAD[{q,0,2}]]+b FCI[CFAD[{q,0,1}]],{q},Head\
\[Rule]loop,FCLoopIBPReducableQ\[Rule]True,FCE\[Rule]True]",
"b*CFAD[{{q, 0}, {0, -1}, 1}] + a*loop[CFAD[{{q, 0}, {0, -1}, \
2}]]"},
{"fcstFCLoopIsolate-ID36",
"FCLoopIsolate[xx CFAD[l,l+p2,l+p2-p3-p4] CVD[l,nu] \
(CVD[p1,Lor4]+CVD[-l-p2+p3+p4,Lor4]) \
KDD[Lor3,mu],{l},ExpandScalarProduct\[Rule]True,Head\[Rule]loopInt,\
FCE\[Rule]True]",
"xx*(CVD[p1, Lor4] - CVD[p2 - p3 - p4, Lor4])*KDD[Lor3, mu]*loopInt[CFAD[{{l, 0},
{0, -1}, 1}, {{l + p2, 0}, {0, -1}, 1}, {{l + p2 - p3 - p4, 0}, {0, -1},
1}]*CVD[l, nu]] - xx*KDD[Lor3, mu]*loopInt[CFAD[{{l, 0}, {0, -1}, 1},
{{l + p2, 0}, {0, -1}, 1}, {{l + p2 - p3 - p4, 0}, {0, -1}, 1}]*CVD[l, Lor4]*CVD[l, nu]]"},
{"fcstFCLoopIsolate-ID37",
"FCLoopIsolate[SPD[q + k, p + l] FAD[{q, m}], {q}, Numerator -> False,
Head -> loop, FCE -> True]",
"loop[FAD[{q, m}]] SPD[l + p, k + q]"},
{"fcstFCLoopIsolate-ID38",
"FCLoopIsolate[FAD[q1] GFAD[{SPD[q1, p] SPD[q2, p], 2}], {q1, q2},
Head -> loopInt, FAD -> False, FCE -> True]",
"FAD[q1] GFAD[{{SPD[p, q1] SPD[p, q2], 1}, 2}]"},
{"fcstFCLoopIsolate-ID39",
"FCLoopIsolate[{FAD[{p, m}, p - q], FAD[{p, m}, p]}, {p},
Head -> loopInt, FCE -> True]",
"{loopInt[FAD[{p, m}, p - q]], loopInt[FAD[{p, m}, p]]}"},
{"fcstFCLoopIsolate-ID40",
"FCLoopIsolate[{FAD[{p, m}, p - q] -> FAD[{p, m}, p]}, {p},
Head -> loopInt, FCE -> True]",
"{loopInt[FAD[{p, m}, p - q]] -> loopInt[FAD[{p, m}, p]]}"},
{"fcstFCLoopIsolate-ID41",
"FCLoopIsolate[{FAD[{p, m}, p - q] == FAD[{p, m}, p]}, {p},
Head -> loopInt, FCE -> True]",
"{loopInt[FAD[{p, m}, p - q]] == loopInt[FAD[{p, m}, p]]}"}
};
