

(* :Title: FCToPakForm.test													*)

(*
	This software is covered by the GNU General Public License 3.
	Copyright (C) 1990-2020 Rolf Mertig
	Copyright (C) 1997-2020 Frederik Orellana
	Copyright (C) 2014-2020 Vladyslav Shtabovenko
*)

(* :Summary:  Framework independent unit tests for FCToPakForm				*)

(* ------------------------------------------------------------------------ *)

Tests`LoopIntegrals`fcstFCToPakForm =
({
{"fcstFCToPakForm-ID1",
"FCToPakForm[FAD[{p1,m1}],{p1},Names\[Rule]x,Head\[Rule]ph,\
FCE->True]",
"{FAD[{p1, m1}], ph[x[1], m1^2*x[1]^2, {{x[1]}, {FAD[{p1, m1}]}, \
{1}}]}"},
{"fcstFCToPakForm-ID2",
"FCToPakForm[FAD[p1,{p3,m1},{p1-p4,m1},p1+q1,p1+q1,p3+q1,p1-p3-p4],\
{p1,p3,p4},Names\[Rule]x,Head\[Rule]ph,FCE->True]",
"{FAD[p1, {p3, m1}, {p1 - p4, m1}, p1 + q1, p1 + q1, p3 + q1, p1 - \
p3 - p4], ph[x[1]*x[2]*x[5] + x[1]*x[3]*x[5] + x[2]*x[3]*x[5] + \
x[1]*x[4]*x[5] + x[3]*x[4]*x[5] + x[1]*x[2]*x[6] + x[1]*x[3]*x[6] + \
x[2]*x[3]*x[6] + x[1]*x[4]*x[6] + x[3]*x[4]*x[6], \
m1^2*x[1]^2*x[2]*x[5] + m1^2*x[1]^2*x[3]*x[5] + \
m1^2*x[1]*x[2]*x[3]*x[5] - SPD[q1, q1]*x[1]*x[2]*x[3]*x[5] + \
m1^2*x[1]^2*x[4]*x[5] + m1^2*x[1]*x[2]*x[4]*x[5] - SPD[q1, \
q1]*x[1]*x[2]*x[4]*x[5] + 2*m1^2*x[1]*x[3]*x[4]*x[5] + \
m1^2*x[2]*x[3]*x[4]*x[5] - SPD[q1, q1]*x[2]*x[3]*x[4]*x[5] + \
m1^2*x[1]*x[4]^2*x[5] + m1^2*x[3]*x[4]^2*x[5] + m1^2*x[1]^2*x[2]*x[6] \
+ m1^2*x[1]^2*x[3]*x[6] + m1^2*x[1]*x[2]*x[3]*x[6] - SPD[q1, \
q1]*x[1]*x[2]*x[3]*x[6] + m1^2*x[1]^2*x[4]*x[6] + \
m1^2*x[1]*x[2]*x[4]*x[6] - SPD[q1, q1]*x[1]*x[2]*x[4]*x[6] + \
2*m1^2*x[1]*x[3]*x[4]*x[6] + m1^2*x[2]*x[3]*x[4]*x[6] - SPD[q1, \
q1]*x[2]*x[3]*x[4]*x[6] + m1^2*x[1]*x[4]^2*x[6] + \
m1^2*x[3]*x[4]^2*x[6] - SPD[q1, q1]*x[1]*x[2]*x[5]*x[6] - SPD[q1, \
q1]*x[1]*x[3]*x[5]*x[6] - SPD[q1, q1]*x[2]*x[3]*x[5]*x[6] - SPD[q1, \
q1]*x[1]*x[4]*x[5]*x[6] - SPD[q1, q1]*x[3]*x[4]*x[5]*x[6], {{x[1], \
x[3], x[4], x[2], x[6], x[5]}, {FAD[p1], FAD[{p1 - p4, m1}], FAD[p1 - \
p3 - p4], FAD[{p3, m1}], FAD[p3 + q1], FAD[p1 + q1]}, {1, 1, 1, 1, 1, \
2}}]}"},
{"fcstFCToPakForm-ID3",
"FCToPakForm[SFAD[{p1,m1^2},{p2,m2^2},{p1-q,3},{p2-q},{p1-p2,m3^2}]\
,{p1,p2},Names\[Rule]x,Head\[Rule]ph,FCE->True]",
"{SFAD[{p1, m1^2}, {p2, m2^2}, {p1 - q, 3}, {p2 - q}, {p1 - p2, \
m3^2}], ph[x[1]*x[2] + x[2]*x[3] + x[1]*x[4] + x[3]*x[4] + x[1]*x[5] \
+ x[2]*x[5] + x[3]*x[5] + x[4]*x[5], m2^2*x[1]^2*x[2] + 3*x[1]*x[2]^2 \
+ m2^2*x[1]*x[2]*x[3] - SPD[q, q]*x[1]*x[2]*x[3] + 3*x[2]^2*x[3] + \
m2^2*x[1]^2*x[4] + 3*x[1]*x[2]*x[4] + m1^2*x[1]*x[2]*x[4] - SPD[q, \
q]*x[1]*x[2]*x[4] + m2^2*x[1]*x[3]*x[4] - SPD[q, q]*x[1]*x[3]*x[4] + \
3*x[2]*x[3]*x[4] + m1^2*x[2]*x[3]*x[4] - SPD[q, q]*x[2]*x[3]*x[4] + \
m1^2*x[1]*x[4]^2 + m1^2*x[3]*x[4]^2 + m2^2*x[1]^2*x[5] + \
3*x[1]*x[2]*x[5] + m2^2*x[1]*x[2]*x[5] + m3^2*x[1]*x[2]*x[5] - SPD[q, \
q]*x[1]*x[2]*x[5] + 3*x[2]^2*x[5] + m2^2*x[1]*x[3]*x[5] - SPD[q, \
q]*x[1]*x[3]*x[5] + 3*x[2]*x[3]*x[5] + m3^2*x[2]*x[3]*x[5] + \
m1^2*x[1]*x[4]*x[5] + m2^2*x[1]*x[4]*x[5] + m3^2*x[1]*x[4]*x[5] + \
3*x[2]*x[4]*x[5] + m1^2*x[2]*x[4]*x[5] - SPD[q, q]*x[2]*x[4]*x[5] + \
m1^2*x[3]*x[4]*x[5] + m3^2*x[3]*x[4]*x[5] - SPD[q, q]*x[3]*x[4]*x[5] \
+ m1^2*x[4]^2*x[5] + m3^2*x[1]*x[5]^2 + m3^2*x[2]*x[5]^2 + \
m3^2*x[3]*x[5]^2 + m3^2*x[4]*x[5]^2, {{x[2], x[4], x[1], x[3], x[5]}, \
{SFAD[{{p1 - p2, 0}, {m3^2, 1}, 1}], SFAD[{{p1 - q, 0}, {3, 1}, 1}], \
SFAD[{{p1, 0}, {m1^2, 1}, 1}], SFAD[{{p2, 0}, {m2^2, 1}, 1}], \
SFAD[{{p2 - q, 0}, {0, 1}, 1}]}, {1, 1, 1, 1, 1}}]}"},
{"fcstFCToPakForm-ID4",
"FCToPakForm[FAD[p1] FAD[p1-p3-p4] FAD[p4] FAD[{p1+q1,0,2}] \
FAD[p3+q1] FAD[{p3,m1}] FAD[{p1-p4,m1}],{p1,p3,p4},Names\[Rule]x,Head\
\[Rule]ph,FCE->True]",
"{FAD[p1]*FAD[p1 - p3 - p4]*FAD[p4]*FAD[p3 + q1]*FAD[{p3, \
m1}]*FAD[{p1 - p4, m1}]*FAD[{p1 + q1, 0}, {p1 + q1, 0}], \
ph[x[1]*x[2]*x[5] + x[1]*x[3]*x[5] + x[1]*x[4]*x[5] + x[2]*x[4]*x[5] \
+ x[3]*x[4]*x[5] + x[1]*x[2]*x[6] + x[1]*x[3]*x[6] + x[1]*x[4]*x[6] + \
x[2]*x[4]*x[6] + x[3]*x[4]*x[6] + x[1]*x[5]*x[6] + x[2]*x[5]*x[6] + \
x[3]*x[5]*x[6] + x[1]*x[2]*x[7] + x[1]*x[3]*x[7] + x[1]*x[4]*x[7] + \
x[2]*x[4]*x[7] + x[3]*x[4]*x[7] + x[1]*x[6]*x[7] + x[2]*x[6]*x[7] + \
x[3]*x[6]*x[7], m1^2*x[1]*x[2]*x[3]*x[5] - SPD[q1, \
q1]*x[1]*x[2]*x[3]*x[5] + m1^2*x[1]*x[3]^2*x[5] + \
m1^2*x[1]*x[2]*x[4]*x[5] - SPD[q1, q1]*x[1]*x[2]*x[4]*x[5] + \
2*m1^2*x[1]*x[3]*x[4]*x[5] + m1^2*x[2]*x[3]*x[4]*x[5] - SPD[q1, \
q1]*x[2]*x[3]*x[4]*x[5] + m1^2*x[3]^2*x[4]*x[5] + \
m1^2*x[1]*x[4]^2*x[5] + m1^2*x[2]*x[4]^2*x[5] + m1^2*x[3]*x[4]^2*x[5] \
+ m1^2*x[1]*x[2]*x[3]*x[6] - SPD[q1, q1]*x[1]*x[2]*x[3]*x[6] + \
m1^2*x[1]*x[3]^2*x[6] + m1^2*x[1]*x[2]*x[4]*x[6] - SPD[q1, \
q1]*x[1]*x[2]*x[4]*x[6] + 2*m1^2*x[1]*x[3]*x[4]*x[6] + \
m1^2*x[2]*x[3]*x[4]*x[6] - SPD[q1, q1]*x[2]*x[3]*x[4]*x[6] + \
m1^2*x[3]^2*x[4]*x[6] + m1^2*x[1]*x[4]^2*x[6] + m1^2*x[2]*x[4]^2*x[6] \
+ m1^2*x[3]*x[4]^2*x[6] - SPD[q1, q1]*x[1]*x[2]*x[5]*x[6] + \
m1^2*x[1]*x[3]*x[5]*x[6] + m1^2*x[2]*x[3]*x[5]*x[6] - SPD[q1, \
q1]*x[2]*x[3]*x[5]*x[6] + m1^2*x[3]^2*x[5]*x[6] + \
m1^2*x[1]*x[4]*x[5]*x[6] + m1^2*x[2]*x[4]*x[5]*x[6] + \
m1^2*x[3]*x[4]*x[5]*x[6] + m1^2*x[1]*x[2]*x[3]*x[7] - SPD[q1, \
q1]*x[1]*x[2]*x[3]*x[7] + m1^2*x[1]*x[3]^2*x[7] + \
m1^2*x[1]*x[2]*x[4]*x[7] - SPD[q1, q1]*x[1]*x[2]*x[4]*x[7] + \
2*m1^2*x[1]*x[3]*x[4]*x[7] + m1^2*x[2]*x[3]*x[4]*x[7] - SPD[q1, \
q1]*x[2]*x[3]*x[4]*x[7] + m1^2*x[3]^2*x[4]*x[7] + \
m1^2*x[1]*x[4]^2*x[7] + m1^2*x[2]*x[4]^2*x[7] + m1^2*x[3]*x[4]^2*x[7] \
- SPD[q1, q1]*x[1]*x[2]*x[5]*x[7] - SPD[q1, q1]*x[1]*x[3]*x[5]*x[7] - \
SPD[q1, q1]*x[1]*x[4]*x[5]*x[7] - SPD[q1, q1]*x[2]*x[4]*x[5]*x[7] - \
SPD[q1, q1]*x[3]*x[4]*x[5]*x[7] + m1^2*x[1]*x[3]*x[6]*x[7] - SPD[q1, \
q1]*x[1]*x[3]*x[6]*x[7] + m1^2*x[2]*x[3]*x[6]*x[7] - SPD[q1, \
q1]*x[2]*x[3]*x[6]*x[7] + m1^2*x[3]^2*x[6]*x[7] + \
m1^2*x[1]*x[4]*x[6]*x[7] - SPD[q1, q1]*x[1]*x[4]*x[6]*x[7] + \
m1^2*x[2]*x[4]*x[6]*x[7] - SPD[q1, q1]*x[2]*x[4]*x[6]*x[7] + \
m1^2*x[3]*x[4]*x[6]*x[7] - SPD[q1, q1]*x[3]*x[4]*x[6]*x[7] - SPD[q1, \
q1]*x[1]*x[5]*x[6]*x[7] - SPD[q1, q1]*x[2]*x[5]*x[6]*x[7] - SPD[q1, \
q1]*x[3]*x[5]*x[6]*x[7], {{x[5], x[1], x[4], x[3], x[2], x[7], x[6]}, \
{FAD[p4], FAD[p1], FAD[p1 - p3 - p4], FAD[{p1 - p4, m1}], FAD[{p3, \
m1}], FAD[p3 + q1], FAD[p1 + q1]}, {1, 1, 1, 1, 1, 1, 2}}]}"}
})
