

(*:Title:ScalarProductCancel.test	*)

(*
	This software is covered by the GNU General Public License 3.
	Copyright (C) 1990-2024 Rolf Mertig
	Copyright (C) 1997-2024 Frederik Orellana
	Copyright (C) 2014-2024 Vladyslav Shtabovenko
*)

(*:Summary:FrameworkindependentunittestsforScalarProductCancel		*)

(*------------------------------------------------------------------------*)

Tests`LoopIntegrals`fcstSPC={

{"fcstSPC-ID1",
	"SPC[SPD[q,p]FAD[{q,m},{q-p,0}],q,FDS->True]//FCE",
	"-FAD[{q, m}]/2 + (FAD[q, {-p + q, m}]*(m^2 + SPD[p, p]))/2"},
{"fcstSPC-ID2",
	"SPC[SPD[q2,p]SPD[q1,p]FAD[{q1,m},{q2,m},q1-p,q2-p,
	q2-q1],q1,q2,FDS->True]//FCE",
	"-FAD[{q1, m}, q1 - q2, -p + q2]/2 + FAD[{q1, m}, {q2, m}, q1 - q2]/4 +
(FAD[q1, q2, {-p + q1, m}, q1 - q2]*(m^2 + SPD[p, p]))/2 -
(FAD[{q1, m}, {q2, m}, -p + q1, q1 - q2]*(m^2 + SPD[p, p]))/2 +
(FAD[{q1, m}, {q2, m}, -p + q1, q1 - q2, -p + q2]*(m^2 + SPD[p, p])^2)/4"},
{"fcstSPC-ID3",
	"SPC[SPD[l,-p1+p3+p2]FAD[{l,m1},{l-p1+p3+p2,m3},
	l-p1+p2,l-k1],l]//FCE",
	"FAD[{l, m1}, -k1 + l, l - p1 + p2]/2 - FAD[{l, m3}, l - p3,
	-k1 + l + p1 - p2 - p3]/2 - (FAD[{l, m1}, -k1 + l, l - p1 + p2,
	{l - p1 + p2 + p3, m3}]*(m1^2 - m3^2 + SPD[p1, p1] - 2*SPD[p1, p2] -
	2*SPD[p1, p3] + SPD[p2, p2] + 2*SPD[p2, p3] + SPD[p3, p3]))/2"},
{"fcstSPC-ID4",
	"SPC[SPD[l,-p1+p3+p2]FAD[{l,m1},{l-p1+p3+p2,m3},
	l-p1+p2,l-k1],l,FDS->True]//FCE",
	"FAD[{l, m1}, -k1 + l, l - p1 + p2]/2 - FAD[{l, m3}, l - p3, -k1 + l + p1 - p2 - p3]/2 -
	(FAD[{l, m1}, -k1 + l, l - p1 + p2, {l - p1 + p2 + p3, m3}]*(m1^2 - m3^2 + SPD[p1, p1] -
	2*SPD[p1, p2] - 2*SPD[p1, p3] + SPD[p2, p2] + 2*SPD[p2, p3] + SPD[p3, p3]))/2"},
{"fcstSPC-ID5",
	"SPC[SPD[l,p1-p3-p2]FAD[{l,m1},{l-p1+p3+p2,m3},
	l-p1+p2,l-k1],l]//FCE",
	"-FAD[{l, m1}, -k1 + l, l - p1 + p2]/2 + FAD[{l, m3}, l -
	p3, -k1 + l + p1 - p2 - p3]/2 + (FAD[{l, m1}, -k1 + l, l -
	p1 + p2, {l - p1 + p2 + p3, m3}]*(m1^2 - m3^2 + SPD[p1, p1] -
	2*SPD[p1, p2] - 2*SPD[p1, p3] + SPD[p2, p2] + 2*SPD[p2, p3] + SPD[p3, p3]))/2"},
{"fcstSPC-ID6",
	"SPC[SPD[l,p1-p3-p2]FAD[{l,m1},{l-p1+p3+p2,m3},
	l-p1+p2,l-k1],l,FDS->True]//FCE",
	"-FAD[{l, m1}, -k1 + l, l - p1 + p2]/2 + FAD[{l, m3},
	l - p3, -k1 + l + p1 - p2 - p3]/2 + (FAD[{l, m1}, -k1 + l,
	l - p1 + p2, {l - p1 + p2 + p3, m3}]*(m1^2 - m3^2 + SPD[p1, p1] -
	2*SPD[p1, p2] - 2*SPD[p1, p3] + SPD[p2, p2] + 2*SPD[p2, p3] + SPD[p3, p3]))/2"},
{"fcstSPC-ID7",
	"SPC[FAD[l,{k1+k2+l-p2,MC},{k1+l,MC}]SPD[k1,l],
	l,FDS->True]//Simplify//FCE",
	"(FAD[{l, MC}, -k1 - k2 + l + p2] - FAD[{l, MC}, {-k2 + l + p2, MC}] +
	FAD[{l, MC}, k1 + l, {-k2 + l + p2, MC}]*(MC^2 - SPD[k1, k1]))/2"},
{"fcstSPC-ID8",
	"SPC[FAD[l,{k1+k2+l-p2,MC},{k1+l,MC}]SPD[l,k1+k2-p2],
	l,FDS->True]//Simplify//FCE",
	"(FAD[l, {-k1 + l, MC}] - FAD[{l, MC}, {-k2 + l + p2, MC}] +
	FAD[{l, MC}, k1 + l, {-k2 + l + p2, MC}]*(MC^2 - SPD[k1, k1] - 2*SPD[k1, k2] +
	2*SPD[k1, p2] - SPD[k2, k2] + 2*SPD[k2, p2] - SPD[p2, p2]))/2"}
};
