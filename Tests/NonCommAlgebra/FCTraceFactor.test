(* :Title: FCTraceFactor.test												*)

(*
	This software is covered by the GNU General Public License 3.
	Copyright (C) 1990-2022 Rolf Mertig
	Copyright (C) 1997-2022 Frederik Orellana
	Copyright (C) 2014-2022 Vladyslav Shtabovenko
*)

(* :Summary:  Framework independent unit tests for FCTraceFactor			*)

(* ------------------------------------------------------------------------ *)

Tests`NonCommAlgebra`fcstFCTraceFactor =
({
{"fcstFCTraceFactor-ID1", "FCTraceFactor[DiracTrace[2]]//FCE",
"2*DiracTrace[1]"},
{"fcstFCTraceFactor-ID2",
"FCTraceFactor[DiracTrace[(2).GA[i]]]//FCE", "2*DiracTrace[GA[i]]"},
{"fcstFCTraceFactor-ID3",
"FCTraceFactor[DiracTrace[(2).(3*GA[i])]]//FCE",
"6*DiracTrace[GA[i]]"},
{"fcstFCTraceFactor-ID4",
"FCTraceFactor[DiracTrace[(2).(3).(4)]]//FCE",
"24*DiracTrace[1]"},
{"fcstFCTraceFactor-ID5",
"FCTraceFactor[DiracTrace[(2).(0).(4)]]//FCE", "0"},
{"fcstFCTraceFactor-ID6",
"FCTraceFactor[DiracTrace[(x*(GS[p1]+M)).GA[mu].SUNT[a].(y*(GS[p2]+\
M).GA[nu])]]//FCE",
"x*y*DiracTrace[(M + GS[p1]) . GA[mu] . SUNT[a] . (M + GS[p2]) . \
GA[nu]]"},
{"fcstFCTraceFactor-ID7",
"FCTraceFactor[DiracTrace[(a+b).(a-b).DiracTrace[GA[i].c.GA[j]].(a+\
b)]]//FCE",
"(a - b)*(a + b)^2*c*DiracTrace[1]*DiracTrace[GA[i] . GA[j]]"},
{"fcstFCTraceFactor-ID8",
"DiracTrace[DiracTrace[GA[i, j]] GA[k, l]] // FCTraceFactor // FCE",
"DiracTrace[GA[i].GA[j]] DiracTrace[GA[k].GA[l]]"},
{"fcstFCTraceFactor-ID9",
"FCTraceFactor[
DiracTrace[(x*(GS[p1] + M)).GA[mu].SI[xx].SUNT[
	a].(y*(GS[p2] + M).GA[nu])], FCE -> True]",
"x y DiracTrace[(M + GS[p1]).GA[mu].SI[xx].SUNT[a].(M + GS[p2]).GA[nu]]"},
{"fcstFCTraceFactor-ID10", "FCTraceFactor[PauliTrace[2]]//FCE",
"2*PauliTrace[1]"},
{"fcstFCTraceFactor-ID11",
"FCTraceFactor[PauliTrace[(2).CSI[i]]]//FCE",
"2*PauliTrace[CSI[i]]"},
{"fcstFCTraceFactor-ID12",
"FCTraceFactor[PauliTrace[(2).(3*CSI[i])]]//FCE",
"6*PauliTrace[CSI[i]]"},
{"fcstFCTraceFactor-ID13",
"FCTraceFactor[PauliTrace[(2).(3).(4)]]//FCE",
"24*PauliTrace[1]"},
{"fcstFCTraceFactor-ID14",
"FCTraceFactor[PauliTrace[(2).(0).(4)]]//FCE", "0"},
{"fcstFCTraceFactor-ID15",
"FCTraceFactor[PauliTrace[(x*(CGS[p1]+M)).CSI[mu].SUNT[a].(y*(CGS[\
p2]+M).CSI[nu])]]//FCE",
"x*y*PauliTrace[(M + CGS[p1]) . CSI[mu] . SUNT[a] . (M + CGS[p2]) \
. CSI[nu]]"},
{"fcstFCTraceFactor-ID16",
"FCTraceFactor[PauliTrace[(a+b).(a-b).PauliTrace[CSI[i].c.CSI[j]].(\
a+b)]]//FCE",
"(a - b)*(a + b)^2*c*PauliTrace[1]*PauliTrace[CSI[i] . CSI[j]]"},
{"fcstFCTraceFactor-ID17",
"PauliTrace[PauliTrace[CSI[i, j]] CSI[k, l]] // FCTraceFactor // \
FCE", "PauliTrace[CSI[i] . CSI[j]]*PauliTrace[CSI[k] . CSI[l]]"},
{"fcstFCTraceFactor-ID18",
"FCTraceFactor[PauliTrace[(x*(CGS[p1] + M)).CSI[mu].SI[xx].SUNT[
	a].(y*(CGS[p2] + M).CSI[nu])], FCE -> True]",
"x*y*PauliTrace[(M + CGS[p1]) . CSI[mu] . SI[xx] . SUNT[a] . (M + \
CGS[p2]) . CSI[nu]]"},
{"fcstFCTraceFactor-ID19",
"FCTraceFactor[SUNTrace[xx SUNT[a1,a2,a3]]]",
"xx*SUNTrace[SUNT[SUNIndex[a1]] . SUNT[SUNIndex[a2]] . \
SUNT[SUNIndex[a3]]]"},
{"fcstFCTraceFactor-ID20",
"FCTraceFactor[SUNTrace[SUNF[aa1,aa2,aa3]SUNF[aa3,aa4,aa5]SUNT[a1,\
a2,a3]]]",
"SUNF[SUNIndex[aa1], SUNIndex[aa2], \
SUNIndex[aa3]]*SUNF[SUNIndex[aa3], SUNIndex[aa4], \
SUNIndex[aa5]]*SUNTrace[SUNT[SUNIndex[a1]] . SUNT[SUNIndex[a2]] . \
SUNT[SUNIndex[a3]]]"},
{"fcstFCTraceFactor-ID21",
"FCTraceFactor[SUNTrace[xx SUNT[a1,a2,a3],Explicit->False]]",
"xx*SUNTrace[SUNT[SUNIndex[a1]] . SUNT[SUNIndex[a2]] . \
SUNT[SUNIndex[a3]], Explicit -> False]"}
})
