

(* :Title: DotSimplify.test                                                 *)

(*
	This software is covered by the GNU General Public License 3.
	Copyright (C) 1990-2016 Rolf Mertig
	Copyright (C) 1997-2016 Frederik Orellana
	Copyright (C) 2014-2016 Vladyslav Shtabovenko
*)

(* :Summary:  Framework independent unit tests for DotSimplify  		*)

(* ------------------------------------------------------------------------ *)

Tests`NonCommAlgebra`fcstDotSimplify = {
{"fcstDotSimplify-ID1","DotSimplify[DiracSlash[2 b, a, 2 (d - c), 6 q - 3 p]]","-12*DiracGamma[Momentum[b]] . DiracGamma[Momentum[a]] . DiracGamma[Momentum[-c + d]] . DiracGamma[Momentum[p - 2*q]]"},
{"fcstDotSimplify-ID2","DotSimplify[GA[mu].(a GS[p] - b GS[q]).GS[q].GA[nu],
Expanding -> True]","a*DiracGamma[LorentzIndex[mu]] . DiracGamma[Momentum[p]] . DiracGamma[Momentum[q]] . DiracGamma[LorentzIndex[nu]] -
b*DiracGamma[LorentzIndex[mu]] . DiracGamma[Momentum[q]] . DiracGamma[Momentum[q]] . DiracGamma[LorentzIndex[nu]]"},
{"fcstDotSimplify-ID3","DotSimplify[xxx.xxx, DotPower -> True]","xxx^2"},

{"fcstDotSimplify-ID4","DeclareNonCommutative[anc, bnc, cnc]\nCommutator[anc, cnc] = 1;\nDotSimplify[anc.anc, DotPower -> True]","anc^2"},
{"fcstDotSimplify-ID5","DotSimplify[anc.(bnc - z cnc).anc]","anc . bnc . anc - z*(anc + cnc . anc . anc)"},
{"fcstDotSimplify-ID6","DotSimplify[QuantumField[A, LorentzIndex[mu]] .
((-LeftPartialD[Momentum[OPEDelta]] + RightPartialD[Momentum[OPEDelta]])^2/4) . QuantumField[A, LorentzIndex[rho]]]",
"1/4 (QuantumField[A, LorentzIndex[mu]].LeftPartialD[
	Momentum[OPEDelta]].LeftPartialD[
	Momentum[OPEDelta]].QuantumField[A, LorentzIndex[rho]] -
2 QuantumField[A, LorentzIndex[mu]].LeftPartialD[
	Momentum[OPEDelta]].RightPartialD[
	Momentum[OPEDelta]].QuantumField[A, LorentzIndex[rho]] +
QuantumField[A, LorentzIndex[mu]].RightPartialD[
	Momentum[OPEDelta]].RightPartialD[
	Momentum[OPEDelta]].QuantumField[A, LorentzIndex[rho]])"},
{"fcstDotSimplify-ID7","DotSimplify[DiracTrace[SUNT[a,b]GA[c,d]SUNT[e,f]]]","DiracTrace[
	DiracGamma[LorentzIndex[c]].DiracGamma[LorentzIndex[d]]] SUNT[
	SUNIndex[a]].SUNT[SUNIndex[b]].SUNT[SUNIndex[e]].SUNT[SUNIndex[f]]"},
{"fcstDotSimplify-ID8","DotSimplify[
RightPartialD[Momentum[OPEDelta]].LeftPartialD[Momentum[OPEDelta]]]",
"LeftPartialD[Momentum[OPEDelta]].RightPartialD[Momentum[OPEDelta]]"},
{"fcstDotSimplify-ID9","DotSimplify[(GA[i].SUNT[a] (GS[p] + M).GA[j].GA[6].GA[k].GA[j] FAD[
p + k, M] +  GA[i].(GS[p1] + M).GA[j].GA[7].GA[j].GA[k] FAD[p1 + k, M]).(GS[q] +
m).(GA[l].(GS[p] + M).GA[n] + GA[n].(GS[p] + M).GA[l]),
PreservePropagatorStructures -> True] // FCE",
"GA[i] . (M + GS[p1]) . GA[j] . GA[7] . GA[j] . GA[k] . (m +
GS[q]) . GA[l] . (M + GS[p]) . GA[n]*FAD[k + p1, M] +
GA[i] . (M + GS[p1]) . GA[j] . GA[7] . GA[j] . GA[k] . (m +
GS[q]) . GA[n] . (M + GS[p]) . GA[l]*FAD[k + p1, M] + GA[i] . (M +
GS[p]) . GA[j] . GA[6] . GA[k] . GA[j] . (m +
GS[q]) . GA[l] . (M + GS[p]) . GA[n]*FAD[k + p,
M]*SUNT[a] + GA[i] . (M +
GS[p]) . GA[j] . GA[6] . GA[k] . GA[j] . (m +
GS[q]) . GA[n] . (M + GS[p]) . GA[l]*FAD[k + p,
M]*SUNT[a]"},
{"fcstDotSimplify-ID10","DotSimplify[GA[5].(1/2).GA[5]]","1/2 DiracGamma[5].DiracGamma[5]"},
{"fcstDotSimplify-ID23","Commutator[QuantumField[FCPartialD[LorentzIndex[xxx_]], A1], QuantumField[A1]] = 0;
DotSimplify[ExpandPartialD[QuantumField[A1].QuantumField[A1].LeftPartialD[nu]]]","2 QuantumField[A1].QuantumField[FCPartialD[LorentzIndex[nu]], A1]"},
{"fcstDotSimplify-ID24","AntiCommutator[QuantumField[FCPartialD[LorentzIndex[xxx_]], A2], QuantumField[A2]] = 0;
DotSimplify[ExpandPartialD[QuantumField[A2].QuantumField[A2].LeftPartialD[nu]]]","0"}
}
