(* Code for generating these symmetry functions

makeList[ex_] :=
Block[{vars, ca, list, tmp},
vars = Cases2[
	ex /. PaVe[ii__, li1_List, li2_List, opts : OptionsPattern[]] :>
	PaVe[{ii}, li1, li2, opts], PaVe];
ca = CoefficientArrays[
	ex /. PaVe[ii__, li1_List, li2_List, opts : OptionsPattern[]] :>
	PaVe[{ii}, li1, li2, opts], vars] // Normal;

If[ca[[1]] =!= 0,
Print["sth went wrong 1"];
Abort[]
];
(*Print[vars];*)
(*Global`XXX=vars;*)

If[Length[Union[Map[{#[[2]], #[[3]]} &, vars]]] =!= 1,
Print[Union[Map[{#[[2]], #[[3]]} &, vars]]];
Print["sth went wrong 2"];
Abort[]
];

tmp = MapThread[list[{#1, First[#2]}] &, {ca[[2]], vars}];
List[tmp /. list -> Identity, vars[[1]][[2]], vars[[1]][[3]]]
];


ClearAll[extMoms];
extMoms[moms__] :=
Times @@ ((MapThread[
	fvd, {{moms}, FCMakeSymbols[i, Range[1, rankN], List]}]) //. {
		r1___, fvd[0, a_], fvd[0, b_], r2___} /;
	FreeQ[{r1}, 0] :> {r1, MTD[a, b], r2} /. fvd -> FVD)



FCClearScalarProducts[];
SPD[p1] = p10;

prepInt := (
props = {{q, Sqrt[m0]}, {q + p1, Sqrt[m1]}};
aux1 =
	Map[FAD @@ Extract[props, List /@ (#)] &,
	Permutations[Range[Length[props]]]];
aux1 =
	tnum[(Times @@ (FVD[q, #] & /@
		FCMakeSymbols[i, Range[1, rankN], List]) )] aux1;
aux2 =
	aux1 /.

	a_tnum FAD[x_, rest__] /;
		MatchQ[x, {q + mom_, _}] :> (a FAD[x, rest] /.

		q -> q - (x[[1]] - q)) /. tnum -> Identity;
SetOptions[ToPaVe, PaVeOrder -> False];
);


(*Run this, just adjust rankN and extMoms accordingly, e.g.
rankN=4;
and
extMoms[p1,p1,p1,p1], extMoms[p1,p1,p1,p2], extMoms[p1,p1,p2,p2],
extMoms[0,0,p1,p1] and extMoms[0,0,p1,p2]
*)
rankN = 7;
prepInt;
aux3 = TID[
	1/(I Pi^2) ToPaVe[ExpandScalarProduct[#], q,
	PaVeAutoOrder -> False, PaVeAutoReduce -> False,
	Abort -> False, PaVeToABCD -> False], q, UsePaVeBasis -> True, ToPaVe -> True,
	PaVeAutoOrder -> False, ApartFF -> False, FDS -> False,
	PaVeAutoReduce -> False, FCVerbose -> 0] & /@ aux2;
ttt = makeList /@
SortBy[(Coefficient[#, FCI[extMoms[0, 0, 0, 0, 0, 0, p1]]] & /@
	ToPaVe2[aux3, PaVeAutoOrder -> False]), LeafCount[#[[1]]] &]


textP1 = ToString[
argPermTensor @@ (ttt[[1]] /. {a_Integer, {b__Integer}} :> b),
InputForm];
textP2 = ToString[
Replace[argPermTensor @@ (ttt[[1]] /. {a_Integer, {b__Integer}} :>
		b), argPermTensor[a_List, b_List, c_List] :>

	argPermTensor[a, pattern /@ b, pattern /@ c]] /.
	pattern[a_] -> Pattern[a, Blank[]], InputForm];
"(* " <> "D" <>
StringJoin[
ToString /@ (Last[
	First[First[
	ttt[[1]]]]])] <> " *)\n" <>
textP2 <> " := \n MemSet[" <> \
textP1 <> ", \n" <> "Block[{tmp},tmp=SortBy[\n" <>

ToString[ttt,
InputForm] <> ",\n  LeafCount[#[[1]]]&];" <> "\n\
tmp]]/;FCPatternFreeQ[" <>
ToString[Flatten[ttt[[1]][[2 ;; 3]]], InputForm] <> "];"
(*COPY-PASTE*)


yux1 = DeleteDuplicatesBy[
ttt /. {{a_, b__List }, _List, _List} :>
	Unevaluated[Sequence[]] /. {{{1, x_List}}, s1_List,
	s2_List} :> {x, s1, s2}, First];
StringRiffle[
Map[ToString[
	Replace[argPermTensor @@ (# /. {a_Integer, {b__Integer}} :> b),
	argPermTensor[a_List, b_List, c_List] :>

		argPermTensor[a, pattern /@ b, pattern /@ c]] /.
	pattern[a_] -> Pattern[a, Blank[]], InputForm] <> " := \n " <>

	textP1 <> ";" &, Rest[yux1]], "\n"]
(*COPY-PASTE*)


*)





(* B1 *)
argPermTensor[{1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {1}}}, {p10}, {m0, m1}}, {{{-1, {0}}, {-1, {1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B11 *)
argPermTensor[{1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {1, 1}}}, {p10}, {m0, m1}}, {{{1, {0}}, {2, {1}}, {1, {1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B111 *)
argPermTensor[{1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {1, 1, 1}}}, {p10}, {m0, m1}}, {{{-1, {0}}, {-3, {1}}, {-3, {1, 1}}, {-1, {1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B001 *)
argPermTensor[{0, 0, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 1}}}, {p10}, {m0, m1}}, {{{-1, {0, 0}}, {-1, {0, 0, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B1111 *)
argPermTensor[{1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0}}, {4, {1}}, {6, {1, 1}}, {4, {1, 1, 1}}, {1, {1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B0011 *)
argPermTensor[{0, 0, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0, 0}}, {2, {0, 0, 1}}, {1, {0, 0, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B11111 *)
argPermTensor[{1, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{1, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {1, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{-1, {0}}, {-5, {1}}, {-10, {1, 1}}, {-10, {1, 1, 1}}, {-5, {1, 1, 1, 1}}, {-1, {1, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B00111 *)
argPermTensor[{0, 0, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{-1, {0, 0}}, {-3, {0, 0, 1}}, {-3, {0, 0, 1, 1}}, {-1, {0, 0, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B00001 *)
argPermTensor[{0, 0, 0, 0, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 0, 0, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 0, 0, 1}}}, {p10}, {m0, m1}}, {{{-1, {0, 0, 0, 0}}, {-1, {0, 0, 0, 0, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B111111 *)
argPermTensor[{1, 1, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{1, 1, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {1, 1, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0}}, {6, {1}}, {15, {1, 1}}, {20, {1, 1, 1}}, {15, {1, 1, 1, 1}}, {6, {1, 1, 1, 1, 1}}, {1, {1, 1, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B001111 *)
argPermTensor[{0, 0, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0, 0}}, {4, {0, 0, 1}}, {6, {0, 0, 1, 1}}, {4, {0, 0, 1, 1, 1}}, {1, {0, 0, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B000011 *)
argPermTensor[{0, 0, 0, 0, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 0, 0, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 0, 0, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0, 0, 0, 0}}, {2, {0, 0, 0, 0, 1}}, {1, {0, 0, 0, 0, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B1111111 *)
argPermTensor[{1, 1, 1, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{1, 1, 1, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {1, 1, 1, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{-1, {0}}, {-7, {1}}, {-21, {1, 1}}, {-35, {1, 1, 1}}, {-35, {1, 1, 1, 1}}, {-21, {1, 1, 1, 1, 1}}, {-7, {1, 1, 1, 1, 1, 1}}, {-1, {1, 1, 1, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B0011111 *)
argPermTensor[{0, 0, 1, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 1, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 1, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{-1, {0, 0}}, {-5, {0, 0, 1}}, {-10, {0, 0, 1, 1}}, {-10, {0, 0, 1, 1, 1}}, {-5, {0, 0, 1, 1, 1, 1}}, {-1, {0, 0, 1, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B0000111 *)
argPermTensor[{0, 0, 0, 0, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 0, 0, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 0, 0, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{-1, {0, 0, 0, 0}}, {-3, {0, 0, 0, 0, 1}}, {-3, {0, 0, 0, 0, 1, 1}}, {-1, {0, 0, 0, 0, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B0000001 *)
argPermTensor[{0, 0, 0, 0, 0, 0, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 0, 0, 0, 0, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 0, 0, 0, 0, 1}}}, {p10}, {m0, m1}}, {{{-1, {0, 0, 0, 0, 0, 0}}, {-1, {0, 0, 0, 0, 0, 0, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B11111111 *)
argPermTensor[{1, 1, 1, 1, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{1, 1, 1, 1, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {1, 1, 1, 1, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0}}, {8, {1}}, {28, {1, 1}}, {56, {1, 1, 1}}, {70, {1, 1, 1, 1}}, {56, {1, 1, 1, 1, 1}}, {28, {1, 1, 1, 1, 1, 1}}, {8, {1, 1, 1, 1, 1, 1, 1}}, {1, {1, 1, 1, 1, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B00111111 *)
argPermTensor[{0, 0, 1, 1, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 1, 1, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 1, 1, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0, 0}}, {6, {0, 0, 1}}, {15, {0, 0, 1, 1}}, {20, {0, 0, 1, 1, 1}}, {15, {0, 0, 1, 1, 1, 1}}, {6, {0, 0, 1, 1, 1, 1, 1}}, {1, {0, 0, 1, 1, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B00001111 *)
argPermTensor[{0, 0, 0, 0, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 0, 0, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 0, 0, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0, 0, 0, 0}}, {4, {0, 0, 0, 0, 1}}, {6, {0, 0, 0, 0, 1, 1}}, {4, {0, 0, 0, 0, 1, 1, 1}}, {1, {0, 0, 0, 0, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B00000011 *)
argPermTensor[{0, 0, 0, 0, 0, 0, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 0, 0, 0, 0, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 0, 0, 0, 0, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0, 0, 0, 0, 0, 0}}, {2, {0, 0, 0, 0, 0, 0, 1}}, {1, {0, 0, 0, 0, 0, 0, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B111111111 *)
argPermTensor[{1, 1, 1, 1, 1, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{1, 1, 1, 1, 1, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {1, 1, 1, 1, 1, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{-1, {0}}, {-9, {1}}, {-36, {1, 1}}, {-84, {1, 1, 1}}, {-126, {1, 1, 1, 1}}, {-126, {1, 1, 1, 1, 1}}, {-84, {1, 1, 1, 1, 1, 1}}, {-36, {1, 1, 1, 1, 1, 1, 1}}, {-9, {1, 1, 1, 1, 1, 1, 1, 1}}, {-1, {1, 1, 1, 1, 1, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B001111111 *)
argPermTensor[{0, 0, 1, 1, 1, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 1, 1, 1, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 1, 1, 1, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{-1, {0, 0}}, {-7, {0, 0, 1}}, {-21, {0, 0, 1, 1}}, {-35, {0, 0, 1, 1, 1}}, {-35, {0, 0, 1, 1, 1, 1}}, {-21, {0, 0, 1, 1, 1, 1, 1}}, {-7, {0, 0, 1, 1, 1, 1, 1, 1}}, {-1, {0, 0, 1, 1, 1, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B000011111 *)
argPermTensor[{0, 0, 0, 0, 1, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 0, 0, 1, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 0, 0, 1, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{-1, {0, 0, 0, 0}}, {-5, {0, 0, 0, 0, 1}}, {-10, {0, 0, 0, 0, 1, 1}}, {-10, {0, 0, 0, 0, 1, 1, 1}}, {-5, {0, 0, 0, 0, 1, 1, 1, 1}}, {-1, {0, 0, 0, 0, 1, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B000000111 *)
argPermTensor[{0, 0, 0, 0, 0, 0, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 0, 0, 0, 0, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 0, 0, 0, 0, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{-1, {0, 0, 0, 0, 0, 0}}, {-3, {0, 0, 0, 0, 0, 0, 1}}, {-3, {0, 0, 0, 0, 0, 0, 1, 1}}, {-1, {0, 0, 0, 0, 0, 0, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B000000001 *)
argPermTensor[{0, 0, 0, 0, 0, 0, 0, 0, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 0, 0, 0, 0, 0, 0, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 0, 0, 0, 0, 0, 0, 1}}}, {p10}, {m0, m1}}, {{{-1, {0, 0, 0, 0, 0, 0, 0, 0}}, {-1, {0, 0, 0, 0, 0, 0, 0, 0, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B1111111111 *)
argPermTensor[{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0}}, {10, {1}}, {45, {1, 1}}, {120, {1, 1, 1}}, {210, {1, 1, 1, 1}}, {252, {1, 1, 1, 1, 1}}, {210, {1, 1, 1, 1, 1, 1}}, {120, {1, 1, 1, 1, 1, 1, 1}}, {45, {1, 1, 1, 1, 1, 1, 1, 1}}, {10, {1, 1, 1, 1, 1, 1, 1, 1, 1}}, {1, {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B0011111111 *)
argPermTensor[{0, 0, 1, 1, 1, 1, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 1, 1, 1, 1, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 1, 1, 1, 1, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0, 0}}, {8, {0, 0, 1}}, {28, {0, 0, 1, 1}}, {56, {0, 0, 1, 1, 1}}, {70, {0, 0, 1, 1, 1, 1}}, {56, {0, 0, 1, 1, 1, 1, 1}}, {28, {0, 0, 1, 1, 1, 1, 1, 1}}, {8, {0, 0, 1, 1, 1, 1, 1, 1, 1}}, {1, {0, 0, 1, 1, 1, 1, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B0000111111 *)
argPermTensor[{0, 0, 0, 0, 1, 1, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 0, 0, 1, 1, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 0, 0, 1, 1, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0, 0, 0, 0}}, {6, {0, 0, 0, 0, 1}}, {15, {0, 0, 0, 0, 1, 1}}, {20, {0, 0, 0, 0, 1, 1, 1}}, {15, {0, 0, 0, 0, 1, 1, 1, 1}}, {6, {0, 0, 0, 0, 1, 1, 1, 1, 1}}, {1, {0, 0, 0, 0, 1, 1, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B0000001111 *)
argPermTensor[{0, 0, 0, 0, 0, 0, 1, 1, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 0, 0, 0, 0, 1, 1, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 0, 0, 0, 0, 1, 1, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0, 0, 0, 0, 0, 0}}, {4, {0, 0, 0, 0, 0, 0, 1}}, {6, {0, 0, 0, 0, 0, 0, 1, 1}}, {4, {0, 0, 0, 0, 0, 0, 1, 1, 1}}, {1, {0, 0, 0, 0, 0, 0, 1, 1, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];

(* B0000000011 *)
argPermTensor[{0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, {p10_}, {m0_, m1_}] :=
MemSet[argPermTensor[{0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, {p10}, {m0, m1}],
Block[{tmp},tmp=SortBy[
{{{{1, {0, 0, 0, 0, 0, 0, 0, 0, 1, 1}}}, {p10}, {m0, m1}}, {{{1, {0, 0, 0, 0, 0, 0, 0, 0}}, {2, {0, 0, 0, 0, 0, 0, 0, 0, 1}}, {1, {0, 0, 0, 0, 0, 0, 0, 0, 1, 1}}}, {p10}, {m1, m0}}},
LeafCount[#[[1]]]&];
tmp]]/;FCPatternFreeQ[{p10, m0, m1}];
